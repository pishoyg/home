[color "diff"]
    newMoved=green bold
    oldMoved=red bold

[core]

    commitGraph = true

    checkCollisions = false

[checkout]
    defaultRemote = origin

[gc]
    pruneExpire = "4 days ago"

    bigPackThreshold = "1G"

    writeCommitGraph = true

[diff]
    indentHeuristic = true

    colorMoved = true

    renameLimit = 4096

[push]
    default = upstream
    autoSetupRemote = true

[fetch]
    output = compact

    prune = true
    pruneTags = true

    fsckObjects = true

[receive]
    fsckObjects = true

[feature]
    manyFiles = true

    experimental = true

[filter "lfs"]
	required = true
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process

[color]
    ui = always

[alias]

    # add
    a = add
    al = add --all

    alc = ! git add --all && git commit
    alcm = ! git add --all && git commit --message
    alcmdp = ! git add --all && git commit --message DEFAULT && git push
    alca = ! git add --all && git commit --amend
    alcap = ! git add --all && git commit --amend && git push
    alcapf = ! git add --all && git commit --amend && git push --force
    alcane = ! git add --all && git commit --no-edit --amend
    alcanep = ! git add --all && git commit --no-edit --amend && git push
    alcanepf = ! git add --all && git commit --no-edit --amend && git push --force

    # branch
    b = branch  # List all of the branches in your repo.
    bl = branch --all  # List remote as well as local branches.
    bv = branch --verbose  # List with verbosity.
    bvv = branch --verbose --verbose  # List with even more verbosity.
    blv = branch --all --verbose  # List remote as well as local branches with verbosity.
    blvv = branch --all --verbose --verbose  # List remote as well as local branches with even more verbosity.
    bj = branch --merged  # List the branches that you have merged into the branch you’re currently on.
    bjv = branch --merged --verbose  # List the branches that you have merged into the branch you’re currently on with verbosity.
    bjvv = branch --merged --verbose --verbose  # List the branches that you have merged into the branch you’re currently on with even more verbosity.
    bnj = branch --no-merged  # List the branches that you have not yet merged into the branch you’re currently on.
    bnjv = branch --no-merged --verbose  # List the branches that you have not yet merged into the branch you’re currently on with verbosity.
    bnjvv = branch --no-merged --verbose --verbose  # List the branches that you have not yet merged into the branch you’re currently on with even more verbosity.

    b = branch  # Given a name, create a branch with that name.
    bf = branch --force  # Force-create a branch.

    bsut = branch --set-upstream-to  # Set the upstream for a branch.
    bsutom = branch --set-upstream-to origin/master  # Set the upstream for a branch.
    bsutot = branch --set-upstream-to origin/trunk  # Set the upstream for a branch.

    bz = branch --move  # Rename a branch.
    bzf = branch --move --force  # Force-rename a branch.

    bc = branch --copy  # Copy a branch.
    bcf = branch --copy --force  # Force-copy a branch.

    bd = branch --delete  # Delete a branch.
    brd = branch --remote --delete  # Delete a remote branch.
    bdf = branch --delete --force  # Force-delete a branch.

    bt = branch --track  # Track a remote branch.

    bwc = branch --show-current

    bwcfogototqbd = ! CUR="$(git branch --show-current)" && git fetch origin && git rebase origin/trunk && git checkout trunk && git pull && git branch --delete "${CUR}"

    bwcfogomomqbd = ! CUR="$(git branch --show-current)" && git fetch origin && git rebase origin/master && git checkout master && git pull && git branch --delete "${CUR}"

    # commit
    c = commit  # Commit.
    ca = commit --amend  # Amend the last commit.
    cane = commit --amend --no-edit  # Amend the last commit without editing the message.
    cl = commit --all  # Commit, automatically staging files that have been modified and deleted (but new files you have not told Git about are not affected).
    cm = commit --message  # Commit, supplying the message on the commandline.
    clrm = commit --all --reuse-message  # Commit, reusing the message from another commit.
    clrmoh = commit --all --reuse-message=ORIG_HEAD
    cal = commit --amend --all
    clm = commit --all --message
    clmd = commit --all --message DEFAULT
    cap = ! git commit --amend && git push
    canep = ! git commit --amend --no-edit && git push
    capf = ! git commit --amend && git push --force
    canepf = ! git commit --amend --no-edit && git push --force
    calp = ! git commit --amend --all && git push
    clmdp = ! git commit --all --message DEFAULT && git push

    # clean
    d = clean
    ddr = clean --dry-run  # Display untracked files.
    dd = clean -d  # Recurse. Go to directories.
    df = clean --force
    di = clean --interactive
    dq = clean --quiet
    de = clean --exclude
    dx = clean -x  # Clean everything, including ignored files.
    dxx = clean -X  # Clean only ignored files.

    ddf = clean -d --force  # Force-recurse. Go to directories.
    dqf = clean --quiet --force
    def = clean --exclude --force
    dxf = clean -x --force  # Force-clean everything, including ignored files.
    dxxf = clean -X --force  # Force-clean only ignored files.

    # clone
    e = clone
    ed1 = clone --depth=1

    # fetch
    f = fetch

    fl = fetch --all
    fo = fetch origin
    fol = fetch origin --all

    fogiom = !git fetch origin && git rebase --interactive origin/master
    fogiomp = !git fetch origin && git rebase --interactive origin/master && git push
    fogiompf = !git fetch origin && git rebase --interactive origin/master && git push --force
    fogiomom = !git fetch origin && git rebase --interactive origin/master && git checkout master
    fogiomomq = !git fetch origin && git rebase --interactive origin/master && git checkout master && git pull

    fogiot = !git fetch origin && git rebase --interactive origin/trunk
    fogiotp = !git fetch origin && git rebase --interactive origin/trunk && git push
    fogiotpf = !git fetch origin && git rebase --interactive origin/trunk && git push --force
    fogiotot = !git fetch origin && git rebase --interactive origin/trunk && git checkout trunk
    fogiototq = !git fetch origin && git rebase --interactive origin/trunk && git checkout trunk && git pull

    fogom = !git fetch origin && git rebase origin/master
    fogomp = !git fetch origin && git rebase origin/master && git push
    fogompf = !git fetch origin && git rebase origin/master && git push --force
    fogomom = !git fetch origin && git rebase origin/master && git checkout master
    fogomomq = !git fetch origin && git rebase origin/master && git checkout master && git pull

    fogot = !git fetch origin && git rebase origin/trunk
    fogotp = !git fetch origin && git rebase origin/trunk && git push
    fogotpf = !git fetch origin && git rebase origin/trunk && git push --force
    fogotot = !git fetch origin && git rebase origin/trunk && git checkout trunk
    fogototq = !git fetch origin && git rebase origin/trunk && git checkout trunk && git pull

    syncall = ! GIT_TREE="~/git_tree" && for D in $(find "${GIT_TREE}" -name .git -type d -maxdepth 2); do D=$(dirname ${D}) && echo '\n>>>>>>>>>>' ${D} && git -C "${D}" pull --rebase=interactive; done  # nonconforming  # This assumes that all your Git repos live under ${GIT_TREE}.

    # rebase
    g = rebase  # Given a <base>, rebase the current branch onto <base>. <base> can be a commit ID, branch name, a tag, or a relative reference to HEAD.

    gi = rebase --interactive

    gio = rebase --interactive --onto

    grcp = rebase --reapply-cherry-picks

    gom = rebase origin/master
    got = rebase origin/trunk

    giom = rebase --interactive origin/master
    giot = rebase --interactive origin/trunk
    gih2 = rebase --interactive HEAD~2
    gih3 = rebase --interactive HEAD~3
    gih4 = rebase --interactive HEAD~4
    gih5 = rebase --interactive HEAD~5

    ga = rebase --abort
    ge = rebase --continue
    gs = rebase --skip
    get = rebase --edit-todo

    # stash
    h = stash
    hd = stash drop
    hp = stash pop
    hl = stash list
    hw = stash show
    ha = stash apply
    hb = stash branch
    hc = stash create
    he = stash clear
    hs = stash save
    hr = stash store

    # diff, difftool
    i = diff  # Diff the worktree and the index.

    ino = diff --name-only
    ins = diff --name-status
    is = diff --stat
    ips = diff --patch-with-stat

    ic = diff --cached  # Diff the index and the last commit.
    icno = diff --cached --name-only
    icns = diff --cached --name-status
    ics = diff --cached --stat
    icps = diff --cached --patch-with-stat

    ih = diff HEAD  # Diff the worktree and the last commit.
    ihno = diff HEAD --name-only
    ihns = diff HEAD --name-status
    ihs = diff HEAD --stat
    ihps = diff HEAD --patch-with-stat

    iom = diff origin/master  # Diff the worktree and origin/master.
    iomno = diff origin/master --name-only
    iomns = diff origin/master --name-status
    ioms = diff origin/master --stat
    iomps = diff origin/master --patch-with-stat

    iot = diff origin/trunk  # Diff the worktree and origin/trunk.
    iotno = diff origin/trunk --name-only
    iotns = diff origin/trunk --name-status
    iots = diff origin/trunk --stat
    iotps = diff origin/trunk --patch-with-stat

    ih1 = diff HEAD~1
    ih2 = diff HEAD~2
    ih3 = diff HEAD~3
    ih4 = diff HEAD~4
    ih5 = diff HEAD~5

    ih21 = diff HEAD~2 HEAD~1
    ih32 = diff HEAD~3 HEAD~2
    ih43 = diff HEAD~4 HEAD~3
    ih54 = diff HEAD~5 HEAD~4

    ini = diff --no-index  # Diff two files on the filesystem.

    ik = diff --check  # Warn if changes introduce conflict markers or whitespace errors.

    it = difftool

    # for-each-ref
    j = for-each-ref
    jscdrh = for-each-ref --sort=-committerdate refs/heads/

    # tag
    k = tag
    kf = tag --force
    ka = tag --annotate
    ks = tag --sign
    kd = tag --delete
    kv = tag --verify
    kl = tag --list
    km = tag --message

    # log, reflog
    # Filter flags:
    # --  # Filter by paths.
    # -   # Limit the number of commits logged.
    # --since, --after, --until, --before
    # --grep
    # --author
    # --commiter
    l = log

    ll = log --all
    lg = log --graph
    lo = log --oneline
    ld = log --decorate
    lpo = log --pretty=oneline
    lps = log --pretty=short
    lpf = log --pretty=full
    lpr = log --pretty=fuller
    lac = log --abbrev-commit
    lp = log --patch  # Show the differences introduced in each commit.
    ls = log --stat  # Show some abbreviated stats for each commit.
    l- = log --  # Given a file, only display commits that have the specified file.
    lstring = log -S  # Show differences that change the number of occurrences of the specified string.
    lss = log --shortstat
    lno = log --name-only
    lns = log --name-status
    lrd = log --relative-date

    lgo = log --graph --oneline
    lod = log --oneline --decorate
    lgod = log --graph --oneline --decorate
    llgo = log --all --graph --oneline
    llod = log --all --oneline --decorate
    llgod = log --all --graph --oneline --decorate

    tree = llgod  # nonconforming

    llgodp = log --all --graph --oneline --decorate --patch
    llgods = log --all --graph --oneline --decorate --stat
    llgodhist = log --all --graph --oneline --decorate -S
    llgodss = log --all --graph --oneline --decorate --shortstat
    llgodno = log --all --graph --oneline --decorate --name-only
    llgodns = log --all --graph --oneline --decorate --name-status
    llgodrd = log --all --graph --oneline --decorate --relative-date

    lf = reflog
    lfrd = reflog --relative-date
    lfl = reflog --all

    # merge, mergetool
    m = merge  # Incorporate changes from the named commits (since the time their histories diverged from the current branch) into the current branch.
    ma = merge --abort  # Abort the current conflict resolution process, and try to reconstruct the pre-merge state.
    me = merge --continue
    mq = merge --quit  # Forget about the current merge in progress. Leave the index and the working tree as-is.

    ms = merge --squash
    mff = merge --ff  # Perform a fast-forward merge if the merged-in history is already a descendant of the current history. This is default.
    mnff = merge --no-ff  # Create a merge-commit even if the merged-in history is already a descendant of the current history.
    mffo = merge --ff-only  # Perform a fast-forward merge if merging into a descendant of the current branch, or fail.

    mu = merge @{upstream}

    mt = mergetool

    status = status  # In conflict resolution, show current status.

    add = add  # (Is it possible to skip this step?) In conflict resolution, mark a file as resolved.

    commit = commit  # (`merge --continue` is preffered.) In conflict resolution, complete the merge.

    # config
    n = config
    ng = config --global
    nge = config --global --edit  # Open the global configuration file in a text editor for manual editing.
    nl = config --list

    ngra = "! git config --get-regexp ^alias\\."
    ngras = "! git config --get-regexp ^alias\\. | sed -e s/^alias\\.// -e s/\\ /\\ =\\ /"  # List aliases.
    ngrasg = "! git config --get-regexp ^alias\\. | sed -e s/^alias\\.// -e s/\\ /\\ =\\ / | grep "  # Grep.
    ngrasga = "! git config --get-regexp ^alias\\. | sed -e s/^alias\\.// -e s/\\ /\\ =\\ / | grep \"^$1 = \" #" # Grep alias.
    ngrasgc = "! git config --get-regexp ^alias\\. | sed -e s/^alias\\.// -e s/\\ /\\ =\\ / | grep \" = $1\\b\" #" # Grep command.

    ncat = "! cat ~/.gitconfig"
    ncats = "! cat ~/.gitconfig | sed -e 's/^[ \t]*//'"
    ncatsg = "! cat ~/.gitconfig | sed -e 's/^[ \t]*//' | grep"
    ncatsga = "! cat ~/.gitconfig | sed -e 's/^[ \t]*//' | grep \"^$1 = \" #"
    ncatsgc = "! cat ~/.gitconfig | sed -e 's/^[ \t]*//' | grep \" = $1\\b\" #"

    aliasl = ngras  # nonconforming
    alias = ngrasga  # nonconforming
    aliases = ngrasgc  # nonconforming

    doc = ncatsga  # nonconforming
    docs = ncatsgc  # nonconforming

    # checkout
    o = checkout  # Given a branch name, switch branches, carrying the index and worktree along.

    oh = checkout HEAD
    oh1 = checkout HEAD^1

    om = checkout master
    omq = ! git checkout master && git pull
    omfo = ! git checkout master && git fetch origin
    omfogiom = ! git checkout master && git fetch origin && git rebase --interactive origin/master
    omfogom = ! git checkout master && git fetch origin && git rebase origin/master

    oom = checkout origin/master

    ot = checkout trunk
    otq = ! git checkout trunk && git pull
    otfo = ! git checkout trunk && git fetch origin
    otfogiot = ! git checkout trunk && git fetch origin && git rebase --interactive origin/trunk
    otfogot = ! git checkout trunk && git fetch origin && git rebase origin/trunk

    oot = checkout origin/trunk

    o = checkout  # Given a file name, update the worktree to match the index. This is equivalent to `restore`.
    o- = checkout --  # Update the worktree to match the index. This is equivalent to `restore`.
    oo = checkout --ours
    oz = checkout --theirs  # Egyptians don't use the voice 'th'. They usually replace it with a 'z' or an 's'. A 'z' in this case. Avoid conflict with `checkout trunk`.
    oj = checkout --merge  # Avoid conflict with `checkout master`.

    ob = checkout -b  # Create a new branch.

    # push
    p = push
    psu = push --set-upstream
    psuo = push --set-upstream origin
    psuom = push --set-upstream origin master
    psuot = push --set-upstream origin trunk
    pf = push --force  # Push even if it results in a non-fast-forward merge.
    phrfm = push HEAD:refs/for/master
    phrft = push HEAD:refs/for/trunk
    pod = push origin --delete  # Delete all listed references from the remote repo.
    pl = push --all  # Push all local branches to the remote repo.
    plf = push --all --force  # Force-push all local branches to the remote repo.
    pt = push --tags  # Push all local tags to the remote repo.

    # pull
    q = pull  # Given a remote, fetch the specified remote’s copy of current branch and immediately merge it into the local copy.
    qf = pull --force
    qr = pull --rebase
    qri = pull --rebase=interactive
    qrf = pull --rebase --force
    qrif = pull --rebase=interactive --force

    # reset
    r = reset  # Reset index to match HEAD, but leave the worktree alone.
    r = reset  # Given a file name, unstage it without writing any changes.
    r- = reset --  # Given a file name, unstage it without writing any changes.
    r = reset  # Given a commit, move the current branch tip backward to that commit, reset the index to match, but leave the worktree alone.

    rh = reset --hard  # Reset index and worktree to match HEAD.
    rh = reset --hard  # Given a commit, reset index and worktree to match that commit, and delete all commits after that commit.
    rs = reset --soft  # Given a commit, reset HEAD to that commit, leaving the index and worktree alone.
    rsh1 = reset --soft HEAD^  # Reset HEAD to HEAD's first parent, leaving the index and worktree alone. This essentially undoes a `commit`.
    rx = reset --mixed  # Reset index, but leave the worktree alone. This is default.
    rj = reset --merge
    rk = reset --keep

    rhh = reset --hard HEAD
    rhom = reset --hard origin/master
    rhot = reset --hard origin/trunk

    # switch
    s = switch  # Switch to a branch.
    sc = switch --create  # Create a branch.
    sfc = switch --force-create  # Force-create a branch.
    sf = switch --force  # Force-switch to a branch.
    sdc = switch --discard-changes  # Switch to a branch, discarding changes in the worktree and index.
    sj = switch --merge  # Switch to a branch, resolving conflicts in case you have local modifications to one or more files that are different between the current branch and the branch to which you are switching.
    s- = switch -  # Switch to the last branch switched to.
    sd = switch --detach  # Switch to a commit for inspection and discardable experiments.

    # status
    t = status
    ts = status --short

    # restore
    u = restore  # Restore the content of the worktree from the index.
    uc = restore --staged  # Restore the content of the index from HEAD. In other words, unstage a file.
    uwt = restore --worktree  # Restore the content of the worktree from the index.
    ucwt = restore --staged --worktree  # Restore the content of both the index and the worktree from HEAD.
    us = restore --source  # Restore the content of the worktree from a given source.
    ucs = restore --staged --source  # Restore the content of the index from a given source.
    uwts = restore --worktree --source  # Restore the content of the worktree from a given source.
    ucwts = restore --staged --worktree --source  # Restore the content of both the index and the worktree from a given source.

    uo = restore --ours
    ut = restore --theirs
    uj = restore --merge

    # revert
    v = revert  # Create a commit that reverts the work done by an earlier commit.
    vm = revert --mainline  # Revert a merge commit, specifying the parent number.
    vne = revert --no-edit  # Revert a commit, without opening the commit message editor.
    vnc = revert --no-commit  # Revert a commit, only applying the changes to the worktree and the index without creating a new commit.
    ve = revert --continue
    vs = revert --skip
    vq = revert --quit
    va = revert --abort

    # show
    w = show  # Shows one or more objects (blobs, trees, tags and commits).
    wmps = show -M -p --stat
    wff = show --format=fuller

    # rm
    x = rm  # Remove files from the working tree and from the index.
    xf = rm --force  # Force-remove files from the working tree and from the index.
    xc = rm --cached  # Remove a file from the index, but keep it in the worktree.
    xcf = rm --cached  --force  # Remove a file from the index, but keep it in the worktree.

    # remote
    y = remote  # Show remote branches.
    ya = remote add  # Add a new remote Git repo.
    yao = remote add origin  # Add a new remote Git repo called 'origin'.
    yv = remote --verbose  # Show remotes with URLs.
    yw = remote show  # Show a remote.
    ywo = remote show origin  # Show the remote called 'origin'.
    yx = remote remove  # Remove a remote.
    yz = remote rename  # Rename a remote.
    ysh = remote set-head
    ysho = remote set-head origin
    yshoa = remote set-head origin --auto

    # mv
    z = mv  # Move or rename a file, a directory, or a symlink.

    # init
    init = init

    # grep
    grep = grep  # Look for specified patterns in the tracked files in the work tree, blobs registered in the index file, or blobs in given tree objects. Patterns are lists of one or more search expressions separated by newline characters. An empty string as search expression matches all lines.

    # Rename a branch (from `main` to `master`).
    # git branch --move main master  # g bz main master
    # git remote rename origin/main origin/master  # g yz origin/main origin/master
    # git fetch origin  # g fo
    # git branch --set-upstream-to origin/master master  # g bsutom master
    # git remote set-head origin --auto  # g yshoa
